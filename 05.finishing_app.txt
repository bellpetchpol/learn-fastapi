1.Now it's might be a good idea to check that the user is already exist let's add validation to auth service register
db_user = self.user_repo.read_by_username(username=new_user.username)
        if db_user is not None:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail={
                    "code": "001",
                    "message": f"The username {new_user.username} already exist."
                }
            )
2. now let's try create existing user we will get 500 internal server error because we put try except on auth controller let's add exception clause
except HTTPException as e:
        raise e

3. ok next our character need weapon let's create weapon table
class Weapons(Base):
    __tablename__ = "weapons"

    id: Mapped[int] = mapped_column(primary_key=True, index=True)
    name: Mapped[str] = mapped_column(String(50))
    damage: Mapped[int]

    character_id: Mapped[int] = mapped_column(ForeignKey("characters.id"))
    character: Mapped["Characters"] = relationship(back_populates="weapon")
    
    def __repr__(self) -> str:
        return f"Weapons(id={self.id}!r, name={self.name}, damage={self.damage}, character_id={self.character_id})"
4. add more relation field to characters
weapon: Mapped["Weapons"] = relationship(back_populates="character")

5. try create migration file
alembic revision --autogenerate -m "add weapon table"
alembic upgrade head

6. then we create add_weapon function in character_repository.py
def add_weapon(self, db_character: Characters, new_weapon: Weapons) -> Characters:
        db_character.weapon = new_weapon
        self.db.add(db_character)
        self.db.commit()
        return db_character

7. we're going to create add_weapon function in service but first we need weapon_dtos let's create it first
from pydantic import BaseModel, Field
from typing import Annotated


class AddWeaponDto(BaseModel):
    name: Annotated[str, Field(max_length=50)]
    damage: Annotated[int, Field(gt=0)]

8. then add_weapon function in service
def add_weapon(self, character_id: int, new_weapon: AddWeaponDto) -> GetCharacterDto:
        db_character = self.read_by_id_return_db_character(
            character_id=character_id)
        db_character = self.repo.add_weapon(
            db_character=db_character,
            new_weapon=Weapons(**new_weapon.model_dump())
        )
        character = GetCharacterDto.model_validate(db_character)
        return character

9. add controller
@router.put("/{character_id}/add-weapon")
async def update_character_weapon(
    character_id: Annotated[int, Path(gt=0)],
    new_weapon: AddWeaponDto,
    character_service: character_service_dependency
) -> GetCharacterDto:
    return character_service.add_weapon(
        character_id=character_id, new_weapon=new_weapon)

10. the result will not contain weapon in GetCharacterDto let's add it
class GetWeaponDto(AddWeaponDto):
    model_config = ConfigDict(from_attributes=True)
    pass

class GetCharacterDto(AddCharacterDto):
    model_config = ConfigDict(from_attributes=True)
    id: Annotated[int, Field(gt=0)]
    user_id: Annotated[int, Field(gt=0)]
    weapon: GetWeaponDto | None = None

11. finally add join to query
def read_by_id(self, character_id: int, user_id: int) -> Characters | None:
        query = self.db.query(Characters).filter(Characters.id == character_id)
        if user_id is not None:
            query = query.filter(Characters.user_id == user_id)
        query = query.outerjoin(Characters.weapon)
        return query.first()

12. next we will create skill table which is many to many relationship to character add following code in models.py
character_skill_table = Table(
    "characters_skills",
    Base.metadata,
    Column("id", type_=Integer, primary_key=True, index=True),
    Column("character_id", ForeignKey("characters.id")),
    Column("skill_id", ForeignKey("skills.id"))
) 

inside characters model
skills: Mapped[list["Skills"]] = relationship(secondary=character_skill_table)

class Skills(Base):
    __tablename__ = "skills"
    
    id: Mapped[int] = mapped_column(primary_key=True, index=True)
    name: Mapped[str] = mapped_column(String(50))
    damage: Mapped[int]

13. run 
alembic revision --autogenerate -m "add weapon table"
alembic upgrade head

14. then we create skill repository service  route
15. add skill to character

16. we will create dummy skill for skills table let's add it in skill_service.py
def add_dummy(self) -> None:
        skills = [
            AddSkillDto(
                name="ลูกบอลไฟ",
                damage=30
            ),
            AddSkillDto(
                name="สายฟ้าฟาด",
                damage=35
            ),
            AddSkillDto(
                name="พายุน้ำแข็ง",
                damage=40
            )
        ]
        
        for skill in skills:
            self.add(skill)

17. and in skill_controller
@router.post("/dummy", status_code=201)
async def add_dummy(skill_service: skill_service) -> None:
    skill_service.add_dummy()

18. dummy character
def randint_hp(self) -> int:
        return randint(100, 150)

    def randint_attack(self) -> int:
        return randint(10, 20)

    def randint_defence(self) -> int:
        return randint(5, 25)

    def randint_magic(self) -> int:
        return randint(5, 20)

    def dummy_character(self, character_name: str) -> AddCharacterDto:
        character_choices = [CharacterRoleEnum.Knight,
                             CharacterRoleEnum.Mage, CharacterRoleEnum.Cleric]
        return AddCharacterDto(
            name=character_name,
            role=choice(character_choices),
            hit_points=self.randint_hp(),
            attack=self.randint_attack(),
            defence=self.randint_defence(),
            magic=self.randint_magic()
        )

    def dummy_weapon(self) -> AddWeaponDto:
        weapons = [
            AddWeaponDto(name="ดาบ", damage=10),
            AddWeaponDto(name="หอก", damage=12),
            AddWeaponDto(name="โซ่", damage=11),
            AddWeaponDto(name="แส้", damage=9)
        ]
        return weapons[randint(0, 3)]

    def dummy(self) -> None:

        characters = [
            self.dummy_character("พี่เบล"),
            self.dummy_character("โน้ตซ่า"),
            self.dummy_character("เทค"),
            self.dummy_character("จั้ม"),
            self.dummy_character("โอลิเวีย"),
            self.dummy_character("แอลเค"),
            self.dummy_character("ยูอิ")
        ]
        
        for character in characters:
            db_character = self.add(character)
            self.add_weapon(db_character.id, self.dummy_weapon())
            weapon_set = set()
            for x in range(0,3):
                y = randint(0,2) + 1
                weapon_set.add(y)
            for weapon_id in weapon_set:
                self.add_skill(db_character.id, weapon_id)

19.fight_Dtos.py
from pydantic import BaseModel

class GetResultDto(BaseModel):
    attacker: str
    message: str
    defender: str

20.fight_service.py
from typing import Annotated

from fastapi import Depends
from ..repositories.character_repository import CharacterRepository
from ..dependencies import auth_user_dependency
from ..dtos.fight_dtos import GetResultDto
from random import sample, randint

from ..models import Characters


class FightService:
    def __init__(self,
                 character_repo: Annotated[CharacterRepository, Depends()],
                 auth_user: auth_user_dependency,
                 ):
        self.character_repo = character_repo
        self.auth_user = auth_user

    def start(self) -> list[GetResultDto]:
        response = list[GetResultDto]()
        page_response = self.character_repo.read_all(
            1, 100, self.auth_user.user_id)
        players = page_response.items
        while len(players) > 1:
            # shuffle player turn
            players = sample(players, len(players))
            for player in players:
                if player.hit_points <= 0:
                    break
                attacker = player
                defenders = [
                    character for character in players if character.id != player.id and character.hit_points > 0]
                if (len(defenders) == 1):
                    defender = defenders[0]
                else:
                    defender = defenders[randint(0, len(defenders) - 1)]
                if randint(0, 1) == 0:
                    # attack with weapon
                    damage = attacker.weapon.damage + attacker.attack
                    attack_with = attacker.weapon.name
                else:
                    # attack with skill
                    skills = attacker.skills
                    if (len(skills) == 1):
                        skill = skills[0]
                    else:
                        skill = skills[randint(0, len(skills) - 1)]
                    # skill = skills[randint(0, len(skills) - 1)]
                    damage = attacker.magic + skill.damage
                    attack_with = skill.name

                defender.hit_points -= damage
                result = GetResultDto(
                    attacker=f"{attacker.name} HP {attacker.hit_points}",
                    defender=f"{defender.name} HP {defender.hit_points}",
                    message=f"{attacker.name} ใช้ {attack_with} โจมตี {defender.name} สร้างความเสียหาย {damage}"
                )
                index = 0
                for character in players:
                    if defender.id == character.id:
                        character.hit_points = defender.hit_points
                        if character.hit_points <= 0:
                            players.pop(index)
                    index += 1
                    
                if defender.hit_points <= 0:
                    result.message += " ถึงตาย!"

                response.append(result)
        survivor = players[0]
        response.append(GetResultDto(
            attacker=survivor.name,
            message=f"{survivor.name} เป็นผู้ชนะ!",
            defender=""
        ))
        return response


