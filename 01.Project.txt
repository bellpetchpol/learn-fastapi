- Create new Project
- Install sql alchemy "pip install sqlalchemy"
- Install postgres lib "pip install psycopg2"
- Create file database.py   

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
SQLALCHEMY_DATABASE_URL = "postgresql+psycopg2://user:password@host:port/dbname"

engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={
                       "check_same_thread": False})

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
#autocommit deafult = false อยู่แล้ว

Base = declarative_base()

- Create models.py file

from .database import Base
from sqlalchemy import Column, Integer, String, Enum
from .dtos.character_dtos import CharacterRoleEnum


class Characters(Base):
    __tablename__ = "characters"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(50), nullable=False)
    role = Column(type_=Enum(CharacterRoleEnum, name="character_role"))
    hit_points = Column(Integer)
    attack = Column(Integer)
    defence = Column(Integer)
    magic = Column(Integer)


- Create "dtos/character_dto.py"
from enum import Enum


class CharacterRoleEnum(str, Enum):
    Knight = "Knight"
    Cleric = "Cleric"
    Mage = "Mage"



- Create main.py

from fastapi import FastAPI
from . import models
from .database import engine

app = FastAPI()

models.Base.metadata.create_all(bind=engine)
- Change database config 
SQLALCHEMY_DATABASE_URL = "postgresql+psycopg2://postgres:kkndqbjhrrew@localhost:5432/python_rpg"
- Create "python_rpg" database
- Try run "uvicorn app.main:app --reload" the characters table will be created
- in main.py file add "SessionLocal" to .database import 
- add "Depends" to fastapi import
- add "from .models import Characters"
- add "from typing import Annotated"
- add "from sqlalchemy.orm import Session" then add the following line

def get_db():
    db = SessionLocal()
    try:
        yield db
        #before this line execute before sending response
    finally:
        db.close()

@app.get("/")
async def read_all_character(db: Annotated[Session, Depends(get_db)]):
    return db.query(Characters).all()

- let's move dependency as function_variable

db_dependency = Annotated[Session, Depends(get_db)]
        
@app.get("/")
async def read_all_character(db: db_dependency):
    return db.query(Characters).all()

- Create "dependencies.py" and move all db_dependency code

from typing import Annotated
from sqlalchemy.orm import Session
from fastapi import Depends
from .database import SessionLocal

def get_db():
    db = SessionLocal()
    try:
        yield db
        #before this line execute before sending response
    finally:
        db.close()
        
db_dependency = Annotated[Session, Depends(get_db)]

- create "character_repository.py" under "repositories" folder

from ..dependencies import db_dependency
from ..models import Characters

class CharacterRepository:
    
    def __init__(self, db: db_dependency):
        self.db = db
        
    def read_all(self) -> list[Characters]:
        return self.db.query(Characters).all()

- update main.py route "/" to use repository instead
@app.get("/")
async def read_all_character(character_repo: Annotated[CharacterRepository, Depends(CharacterRepository)]):
    return character_repo.read_all()

- Create "app/services/CharacterService.py"
from fastapi import Depends
from ..models import Characters
from ..repositories.character_repository import CharacterRepository
from typing import Annotated

class CharacterService:
    def __init__(self, repo: Annotated[CharacterRepository, Depends(CharacterRepository)]):
        self.repo = repo
        
    def read_all(self) -> list[Characters]:
        return self.repo.read_all()

- Update main.py to use service instead of repo

- new version of python and sqlalchemy we need to change something for models
class Characters(Base):
    __tablename__ = "characters"

    id: Mapped[int] = mapped_column(primary_key=True, index=True)
    name: Mapped[str] = mapped_column(String(30), nullable=True)
    role: Mapped[CharacterRoleEnum] = mapped_column(
        Enum(CharacterRoleEnum, name="character_role"))
    hit_points: Mapped[int]
    attack: Mapped[int]
    defence: Mapped[int]
    magic: Mapped[int]
    
    def __repr__(self) -> str:
        return f"Character(id={self.id}!r, name={self.name}!r, role={self.role.value}!r, hit_points={self.hit_points}!r, attack={self.attack}!r, defence={self.defence}!r, magic={self.magic}!r)"

- Move service and repo dependencies to dependencies folder
- Create "dependencies/repository_dependencies.py"
from typing import Annotated
from fastapi import Depends
from ..repositories.character_repository import CharacterRepository

character_repository_dependency = Annotated[CharacterRepository, Depends(
    CharacterRepository)]

- Create "dependencies/service_dependencies.py"
from typing import Annotated
from fastapi import Depends
from ..services.character_service import CharacterService

character_service_dependency = Annotated[CharacterService, Depends(
    CharacterService)]




- Add add function to character repo with db.commit()
def add(self, new_character: Characters) -> Characters:
        self.db.add(new_character)
        self.db.commit()
        return new_character

- then we going to create function for character service but we need dtos first
- Update "/dtos/character_dtos.py" add import and following code
from pydantic import BaseModel, ConfigDict, Field

class AddCharacterDto(BaseModel):
    name: Annotated[str, Field(min_length=3, max_length=50)]
    role: CharacterRoleEnum
    hit_points: Annotated[int, Field(gt=0, lt=101)]
    attack: Annotated[int, Field(ge=5, le=20)]
    defence: Annotated[int, Field(ge=5, le=20)]
    magic: Annotated[int, Field(ge=5, le=20)]


class GetCharacterDto(AddCharacterDto):
    model_config = ConfigDict(from_attributes=True)
    id: Annotated[int, Field(gt=0)]

- update "/services/CharacterService.py"
from ..dtos.character_dtos import AddCharacterDto, GetCharacterDto

def add(self, new_character: AddCharacterDto) -> GetCharacterDto:
        db_character = self.repo.add(new_character=Characters(**new_character.model_dump()))
        character = GetCharacterDto.model_validate(db_character)
        return character

- update main.py for add_character function
from .dtos.character_dtos import AddCharacterDto, GetCharacterDto

@app.post("/")
async def add_character(new_character: AddCharacterDto, character_service: Annotated[CharacterService, Depends(CharacterService)]) -> GetCharacterDto:
    result = character_service.add(new_character=new_character)
    return result

- we can have example data for any dto add following code to AddCharacterDto
model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "name": "Bell",
                    "role": "Mage",
                    "hit_points": 100,
                    "attack": 15,
                    "defence": 10,
                    "magic": 5
                }
            ]
        }
    }

- then we can change the http status code of post api to 201 add following code
@app.post("/", status_code=201)

- we can also use status which import from fastapi we will get code hint!
@app.post("/", status_code=status.HTTP_201_CREATED)

- new we will create get by id start from repository
def read_by_id(self, character_id: int) -> Characters | None:
        return self.db.query(Characters).filter(Characters.id == character_id).first()

- next service
def read_by_id(self, character_id: int) -> GetCharacterDto:
        db_character = self.repo.read_by_id(character_id=character_id)
        if db_character is None:
            raise HTTPException(status_code=404, detail=f"Character id: {character_id} not found")
        return GetCharacterDto.model_validate(db_character)

- then main.py
@app.get("/{character_id}")
async def read_character_by_id(character_id: int, character_service: Annotated[CharacterService, Depends(CharacterService)]):
    return character_service.read_by_id(character_id=character_id)

- try add more functionality of read_by_id
- add Http response 200
@app.get("/{character_id}", status_code=200)
- add path validation gt =0
character_id: Annotated[int, Path(gt=0)]

- next we will improve get all but we need other thing first

- add skip and take query parameter as dependencies in dependencies.py
async def page_parameters(skip: int = 0, limit: int = 25):
    return {"skip": skip, "limit": limit}
- now i think we need pydantic model for skip and take create request_dtos.py
from pydantic import BaseModel


class PageDto(BaseModel):
    skip: int = 0
    limit: int = 25

- update page_parameters in dependencies.py
async def page_parameters(skip: int = 0, limit: int = 25) -> PageDto:
    return PageDto(**{"skip": skip, "limit": limit})

- and make it as dependency
page_dependency = Annotated[PageDto, Depends(page_parameters)]

- update repo to have skip and limit
def read_all(self, skip: int, limit: int) -> list[Characters]:
        return self.db.query(Characters).offset(skip).limit(limit).all()

- fix service to map character to GetCharacterDto and use pageDto
def read_all(self, page_dto: PageDto) -> list[GetCharacterDto]:
        db_characters = self.repo.read_all(page_dto.skip, page_dto.limit)
        characters = list[GetCharacterDto]()
        for db_character in db_characters:
            characters.append(GetCharacterDto.model_validate(db_character))
        return characters

- use page_dependency on get_all route
@app.get("/")
async def read_all_character(page_dtos: page_dependency, character_service: Annotated[CharacterService, Depends(CharacterService)]) -> list[GetCharacterDto]:
    return character_service.read_all(page_dtos)

- now we see that we can do this our self but actually in fastapi there is a library we can use call "fastapi-pagination" run "pip install fastapi-pagination"
- we will start from repository add import
from fastapi_pagination.ext.sqlalchemy import paginate
from fastapi_pagination import Page
from sqlalchemy import select
- and then update read_all code
def read_all(self) -> Page[Characters]:
    return paginate(self.db, select(Characters).order_by(Characters.id))

- next update service
def read_all(self) -> Page[GetCharacterDto]:
    return self.repo.read_all()
- next main.py we no longer need pageDto so we will remove it and add following import instead
from fastapi_pagination import Page, add_pagination

- add following code after initiate fastapi
add_pagination(app)

- fix read_all code to return Page[T]
@app.get("/")
async def read_all_character(
    character_service: Annotated[CharacterService, Depends(CharacterService)]
) -> Page[GetCharacterDto]:
    return character_service.read_all()

- as you can see right now the page size is unlimit let's change this behavior add following code in main.py
from fastapi_pagination import Page, add_pagination

Page = Page.with_custom_options(
    size=Query(default=25, ge=1, le=100),
)

- let's add update character next start from dto let's create UpdateCharacterDto
class UpdateCharacterDto(AddCharacterDto):
    name: Annotated[str | None, Field(min_length=3, max_length=50)]
    role: CharacterRoleEnum | None
    hit_points: Annotated[int | None, Field(gt=0, lt=101)]
    attack: Annotated[int | None, Field(ge=5, le=20)]
    defence: Annotated[int | None, Field(ge=5, le=20)]
    magic: Annotated[int | None, Field(ge=5, le=20)]

- add update character to repositories
def update(self, db_character: Characters, update_character: UpdateCharacterDto) -> Characters:
        if update_character.name is not None:
            db_character.name = update_character.name

        if update_character.hit_points is not None:
            db_character.hit_points = update_character.hit_points

        if update_character.role is not None:
            db_character.role = update_character.role

        if update_character.attack is not None:
            db_character.attack = update_character.attack

        if update_character.defence is not None:
            db_character.defence = update_character.defence

        if update_character.magic is not None:
            db_character.magic = update_character.magic

        self.db.add(db_character)
        self.db.commit()
        return db_character

- add update_character to service
def update(self, character_id: int, update_character: UpdateCharacterDto) -> GetCharacterDto:
        db_character = self.repo.read_by_id(character_id=character_id)
        if db_character is None:
            raise HTTPException(
                status_code=404, detail=f"Character id: {character_id} not found")
        updated_db_character = self.repo.update(
            db_character=db_character, update_character=update_character
        )
        result = GetCharacterDto.model_validate(updated_db_character)
        return result

- add update_character to main
@app.put("/{character_id}/update")
async def update_character(
    character_id: Annotated[int, Path(gt=0)],
    update_character: UpdateCharacterDto,
    character_service: character_service_dependency
) -> GetCharacterDto:
    result = character_service.update(
        character_id=character_id, update_character=update_character
    )
    return result

- the last one for character is delete let's start from repositories
def delete(self, db_character: Characters) -> None:
        self.db.delete(db_character)
        self.db.commit()

- next service
def delete(self, character_id: int) -> None:
        db_character = self.repo.read_by_id(character_id=character_id)
        if db_character is None:
            raise HTTPException(
                status_code=404, detail=f"Character id: {character_id} not found")
        self.repo.delete(db_character=db_character)

- next main.py
@app.delete("/{character_id}/delete", status_code=status.HTTP_204_NO_CONTENT)
async def delete_character(
    character_id: Annotated[int, Path(gt=0)],
    character_service: Annotated[CharacterService, Depends(CharacterService)]
) -> None:
    character_service.delete(character_id=character_id)