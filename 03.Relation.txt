1. add relation to User and Character
1.1 in characters model add 
user_id: Mapped[int] = mapped_column(ForeignKey("users.id"))

user: Mapped["Users"] = relationship(back_populates="Characters")

1.2 in users model add 
characters: Mapped[list["Characters"]
                       ] = relationship(back_populates="Users")

2. we need read_user_by_id so let's create it in user_repository
def read_by_d(self, user_id: int) -> Users | None:
        return self.db.query(Users).filter(Users.id == user_id).first()

3. we also need it in service we don't have one alraedy so let's create user_service
4. in character_service inject auth_user
def __init__(self,
                 repo: Annotated[CharacterRepository, Depends()],
                 auth_user: auth_user_dependency
                 ):
        self.repo = repo
        self.auth_user = auth_user

5. edit add character to character_service
def add(self, new_character: AddCharacterDto) -> GetCharacterDto:
        db_character = Characters(**new_character.model_dump())
        db_character.user_id = self.auth_user.user_id
        db_character = self.repo.add(new_character=db_character)
        character = GetCharacterDto.model_validate(db_character)
        return character

6. we're going to delete our table and recreate it and when we try to login we're going to get weired error it's because we raise HTTPException in service but we have try catch in controller let's fix it

try:
        result = auth_service.login_for_access_token(
            username=form_data.username, password=form_data.password)
        return result
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(e)
        raise HTTPException(status_code=500, detail="Internal server error")

7. we can add characte now but we still don't see relate user_id let's update GetCharacterDto
class GetCharacterDto(AddCharacterDto):
    model_config = ConfigDict(from_attributes=True)
    id: Annotated[int, Field(gt=0)]
    user_id: Annotated[int, Field(gt=0)]

8. next we're going to fix get character_by_id to return then character that belong to current user only
8.1 update character_repository
- in read_all
query = self.db.query(Characters)
        if user_id is not None:
            query = query.filter(Characters.user_id == user_id)
        query = query.order_by(Characters.id)

- in read by id
def read_by_id(self, character_id: int, user_id: int) -> Characters | None:
        query = self.db.query(Characters).filter(Characters.id == character_id)
        if user_id is not None:
            query = query.filter(Characters.user_id == user_id)
        return query.first()

8.2 update character_service